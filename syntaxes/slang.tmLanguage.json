{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "S-Lang",
	"patterns": [
		{
			"include": "#shebang"
		},
		{
			"include": "#terminator"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#raw_strings"
		},
		{
			"include": "#block"
		},
		{
			"include": "#import"
		},
		{
			"include": "#method_access"
		},
		{
			"include": "#member_access"
		},
		{
			"include": "#function-call"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#storage_types"
		}
	],
	"repository": {
		"shebang": {
			"name": "comment.line.shebang.slang",
			"match": "\\A(#!).*(?=$)",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.slang"
				}
			}
		},
		"terminator": {
			"match": ";",
			"name": "punctuation.terminator.statement.slang"
		},
		"member_access": {
			"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:(\\.)|(->))((?:[a-zA-Z_]\\w*\\s*(?:(?:\\.)|(?:->))\\s*)*)\\s*(\\b(?!(?:void|char|bool|int)\\b)[a-zA-Z_]\\w*\\b(?!\\())",
			"captures": {
				"1": {
					"name": "variable.other.object.access.slang"
				},
				"2": {
					"name": "punctuation.separator.dot-access.slang"
				},
				"3": {
					"name": "punctuation.separator.namespace-access.slang"
				},
				"4": {
					"patterns": [
						{
							"include": "#member_access"
						},
						{
							"include": "#method_access"
						},
						{
							"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:(\\.)|(->))",
							"captures": {
								"1": {
									"name": "variable.other.object.access.slang"
								},
								"2": {
									"name": "punctuation.separator.dot-access.slang"
								},
								"3": {
									"name": "punctuation.separator.namespace-access.slang"
								}
							}
						}
					]
				},
				"5": {
					"name": "variable.other.member.slang"
				}
			}
		},
		"method_access": {
			"contentName": "meta.function-call.member.slang",
			"begin": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:(\\.)|(->))((?:[a-zA-Z_]\\w*\\s*(?:(?:\\.)|(?:->))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.other.object.access.slang"
				},
				"2": {
					"name": "punctuation.separator.dot-access.slang"
				},
				"3": {
					"name": "punctuation.separator.namespace-access.slang"
				},
				"4": {
					"patterns": [
						{
							"include": "#member_access"
						},
						{
							"include": "#method_access"
						},
						{
							"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:(\\.)|(->))",
							"captures": {
								"1": {
									"name": "variable.other.object.access.slang"
								},
								"2": {
									"name": "punctuation.separator.dot-access.slang"
								},
								"3": {
									"name": "punctuation.separator.namespace-access.slang"
								}
							}
						}
					]
				},
				"5": {
					"name": "entity.name.function.member.slang"
				},
				"6": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.slang"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.slang"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"block": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.slang"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.slang"
						}
					},
					"name": "meta.block.slang",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#function-call"
				},
				{
					"name": "meta.initialization.slang",
					"begin": "(?:(?:(?=\\s)(?<!else|new|return)(?<=\\w)\\s+(and|not|or|xor)))((?:[A-Za-z_][A-Za-z0-9_]*+)++)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "variable.other.slang"
						},
						"2": {
							"name": "punctuation.section.parens.begin.bracket.round.initialization.slang"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.initialization.slang"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.slang"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:else\\s+(if)*)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.slang"
						}
					},
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"include": "#parens-block"
				},
				{
					"include": "$self"
				}
			]
		},
		"function-call": {
			"begin": "(?!(?:while|_for|for|foreach|using|loop|then|forever|do|if|ifnot|else|continue|break|switch|case|try|catch|throw|finally|return|sizeof|and|not|or|xor|import|autoload|require|eval_file)\\s*\\()(?=(?:[A-Za-z_][A-Za-z0-9_]*+)++\\s*\\(|(?:[-*&<>=+!]+|\\(\\)|\\[\\])\\s*\\()",
			"end": "\\)",
			"name": "meta.function-call.slang",
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?!(?:while|_for|for|foreach|using|loop|then|forever|do|if|ifnot|else|continue|break|switch|case|try|catch|throw|finally|return|sizeof|and|not|or|xor|import|autoload|require|eval_file)\\s*\\()((?:[A-Za-z_][A-Za-z0-9_]*+)++|(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.slang"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.slang"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.slang"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.slang"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.slang"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#block_innards"
				}
			]
		},
		"parens-block": {
			"name": "meta.parens.block.slang",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.slang"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.slang"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				},
				{
					"match": "(?-mix:(?<!:):(?!:))",
					"name": "punctuation.range-based.slang"
				}
			]
		},
		"storage_types": {
			"name": "storage.type.slang",
			"match": "\\b(?:(Char|UChar|Short|Ushort|UShort|Int|Integer|UInteger|Long|ULong|LLong|ULLong|Float|Double|Complex|String|BString|Struct|Ref|Null|Array|Assoc|List|DataType)_Type|EXIT_BLOCK|ERROR_BLOCK|USER_BLOCK[0-4])\\b"
		},
		"operators": {
			"patterns": [
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.slang"
				},
				{
					"match": "\\+=|-=|\\*=|/=|&=|\\|=",
					"name": "keyword.operator.assignment.compound.slang"
				},
				{
					"match": "&|\\||~|shr|sht|xor",
					"name": "keyword.operator.bitwise.shift.slang"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.slang"
				},
				{
					"match": "&&|\\|\\||and|or|not",
					"name": "keyword.operator.logical.slang"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.slang"
				},
				{
					"match": "%|\\*|/|-|\\+|--|\\+\\+|\\^|mod",
					"name": "keyword.operator.slang"
				},
				{
					"begin": "(\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.slang"
						}
					},
					"end": "(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.slang"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"include": "#operators"
				},
				{
					"match": "\\b(while|_for|for|foreach|using|loop|then|forever|do|if|ifnot|else|continue|break|switch|case|try|catch|throw|finally|return)\\b",
					"name": "keyword.control.c"
				},
				{
					"name": "storage.type.slang",
					"match": "\\b(variable|struct)\\b"
				},
				{
					"match": "\\b(?:(NULL)|(PI|E))\\b",
					"captures": {
						"1": {
							"name": "constant.language.slang"
						},
						"2": {
							"name": "constant.numeric.isis.slang"
						}
					}
				},
				{
					"name": "support.type.slang",
					"match": "\\b(typedef|define|static|public|private)\\b"
				},
				{
					"name": "support.type.exception.slang",
					"match": "\\b(Any|OS|Malloc|Import|Parse|Syntax|DuplicateDefinition|UndefinedName|RunTime|InvalidParm|TypeMismatch|UserBreak|Stack|StackOverflow|StackUnderflow|ReadOnly|VariableUnitialized|NumArgs|Index|Usage|Application|Internal|NotImplemented|LimitExceeded|Math|DivideByZero|ArithOverflow|ArithUnderflow|Domain|IO|Write|Read|Open|Data|Unicode|InvalidUTF8|UnknownError)Error\\b"
				}
			]
		},
		"import": {
			"match": "\\b(import|autoload|require|eval_file)\\s*\\(",
			"captures": {
				"1": {
					"name": "support.function.module.slang"
				}
			}
		},
		"delimiters": {
			"patterns": [
				{
					"match": "\\,|:",
					"name": "punctuation.other.slang"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.slang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.slang",
					"match": "\\\\(\\\\|[aefnrtv'\"]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|d[0-2]\\d{,2}|d[3-9]\\d?)"
				},
				{
					"name": "invalid.illegal.unknown-escape.slang",
					"match": "(?!.*) #not match anything, keep to use later.  \\\\."
				}
			]
		},
		"raw_strings": {
			"name": "string.quoted.backtick.slang",
			"begin": "`",
			"end": "`"
		},
		"comment": {
			"patterns": [
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				}
			]
		},
		"line_comment": {
			"match": "%.*(?:\\n|$)",
			"captures": {
				"0": {
					"name": "comment.line.percentage.slang"
				}
			}
		},
		"block_comment": {
			"begin": "\\s*+(#<([^\\s<>]+)>)",
			"end": "#<\\/\\2()>",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.begin.slang"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.end.slang"
				}
			},
			"name": "comment.block.tags.slang"
		}
	},
	"scopeName": "source.slang"
}